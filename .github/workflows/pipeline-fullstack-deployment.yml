name: EKS-With-Terraform Infrastructure Deployment

# on:
#   push:
#     branches:
#       - main
on: workflow_dispatch

env:
 # verbosity setting for Terraform logs--test
 TF_LOG: INFO
 # Credentials for deployment to AWS
 aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
 aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }} 

jobs:
  iam_deployment:
    name: "Deploy IAM"
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash       
       working-directory: ./terraform/iam
    
    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Test configuration of AWS CLI
      run: |
        aws --version
        aws configure list | grep region | awk '{print $2}'

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check=true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=../environments/dev/iam.tfvars -input=false -out=tfplan
      continue-on-error: true

    - name: Check for Changes in Terraform Plan
      id: plan_changes
      run: echo "::set-output name=changed::$(terraform show -json tfplan | jq '.resource_changes | length > 0')"

    - name: Terraform Apply
      run: terraform apply -var-file=../environments/dev/iam.tfvars -auto-approve

    - name: Store Outputs
      id: terraform_outputs
      run: echo "::set-output name=outputs::$(terraform output -json)"

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Clean up
      run: rm -f tfplan
  network_deployment:
    name: "Deploy Network"
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash       
       working-directory: ./terraform/infra-deployments/deploy-network
    
    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Test configuration of AWS CLI
      run: |
        aws --version
        aws configure list | grep region | awk '{print $2}'

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check=true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=../../environments/dev/deploy-network.tfvars -input=false -out=tfplan
      continue-on-error: true 

    - name: Check for Changes in Terraform Plan
      id: plan_changes
      run: echo "::set-output name=changed::$(terraform show -json tfplan | jq '.resource_changes | length > 0')"

    - name: Terraform Apply
      run: terraform apply -var-file=../../environments/dev/deploy-network.tfvars -auto-approve

    - name: Store Outputs
      id: terraform_outputs
      run: echo "::set-output name=outputs::$(terraform output -json)"

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Clean up
      run: rm -f tfplan
  eks_deployment:
    name: "Deploy EKS"
    runs-on: ubuntu-latest
    needs: [iam_deployment,network_deployment]
    defaults:
     run:
       shell: bash       
       working-directory: ./terraform/infra-deployments/deploy-eks
    
    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Test configuration of AWS CLI
      run: |
        aws --version
        aws configure list | grep region | awk '{print $2}'

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check=true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=../../environments/dev/deploy-eks.tfvars -input=false -out=tfplan
      continue-on-error: true 

    - name: Check for Changes in Terraform Plan
      id: plan_changes
      run: echo "::set-output name=changed::$(terraform show -json tfplan | jq '.resource_changes | length > 0')"

    - name: Terraform Apply
      run: terraform apply -var-file=../../environments/dev/deploy-eks.tfvars -auto-approve

    - name: Store Outputs
      id: terraform_outputs
      run: echo "::set-output name=outputs::$(terraform output -json)"

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Clean up
      run: rm -f tfplan  
  bastion_host_deployment:
    name: "Deploy Bastion-Host"
    runs-on: ubuntu-latest
    needs: [network_deployment,eks_deployment]
    defaults:
     run:
       shell: bash       
       working-directory: ./terraform/infra-deployments/deploy-bastion-host
    
    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Test configuration of AWS CLI
      run: |
        aws --version
        aws configure list | grep region | awk '{print $2}'

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check=true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=../../environments/dev/deploy-bastion-host.tfvars -input=false -out=tfplan
      continue-on-error: true 

    - name: Check for Changes in Terraform Plan
      id: plan_changes
      run: echo "::set-output name=changed::$(terraform show -json tfplan | jq '.resource_changes | length > 0')"

    - name: Terraform Apply
      run: terraform apply -var-file=../../environments/dev/deploy-bastion-host.tfvars -auto-approve

    - name: Store Outputs
      id: terraform_outputs
      run: echo "::set-output name=outputs::$(terraform output -json)"

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Clean up
      run: rm -f tfplan    
  app_deployment:
    name: "Deploy App"
    runs-on: ubuntu-latest
    needs: [eks_deployment]
    defaults:
      run:
        shell: bash       
        working-directory: ./terraform/platform-deployments/deploy-app
    
    steps:
    - name: Checkout the repository to the runner
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Test configuration of AWS CLI
      run: |
        aws --version
        aws configure list | grep region | awk '{print $2}'

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format Check
      run: terraform fmt -check=true

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -out=tfplan
      continue-on-error: true 

    - name: Check for Changes in Terraform Plan
      id: plan_changes
      run: echo "::set-output name=changed::$(terraform show -json tfplan | jq '.resource_changes | length > 0')"

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Store Outputs
      id: terraform_outputs
      run: echo "::set-output name=outputs::$(terraform output -json)"

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Clean up
      run: rm -f tfplan   